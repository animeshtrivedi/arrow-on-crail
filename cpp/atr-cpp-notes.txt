---
C++ reference: https://en.cppreference.com/w/

Arrow building needs boost
sudo apt-get install libboost-all-dev

Arrow C++ readme has some good details.

DCMAKE_INSTALL_PREFIX (see ~/cmake.sh)
cmake -DCMAKE_INSTALL_PREFIX=/usr ..


Import in eclipse: or use KDevelop, that seem to be decent
cmake -G "Eclipse CDT4 - Unix Makefiles" ./

https://stackoverflow.com/questions/17131744/eclipse-cdt-indexer-does-not-know-c11-containers


gtest/gtest.h: No such file or directory
libgtest-dev install

Then compile it from source:
sudo apt-get install libgtest-dev
Note that this package only install source files. You have to compile the code yourself to create the necessary library files. These source files should be located at /usr/src/gtest. Browse to this folder and use cmake to compile the library:

sudo apt-get install cmake # install cmake
cd /usr/src/gtest
sudo cmake CMakeLists.txt
sudo make

# copy or symlink libgtest.a and libgtest_main.a to your /usr/lib folder
sudo cp *.a /usr/lib
Now to compile your programs that uses gtest, you have to link it with:

-lgtest -lgtest_main

So, there are RecordBatchFileReader and RecordBatchFileWriter. These inherit from RecordBatchStreamWriter
and from RecordBatchWriter (and associated reader classes)

Reader takes:

static Status Open([INPUT] io::RandomAccessFile* file,
                     [OUTPUT] std::shared_ptr<RecordBatchFileReader>* reader);

RandomAccessFile is
class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable -> This I can implement for Crail

Currently this class is implemented by
- BufferReader
- HdfsReadableFile
- MemoryMappedFile
- ReadWriteFileInterface
- ReadableFile



***
Step 1: install local arrow library, clone from github, checkout the specific version and then
mkdir release
cd release
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/home/atr/local/ ..
cmake -DCMAKE_BUILD_TYPE=Release -DARROW_USE_SSE=ON -DCMAKE_INSTALL_PREFIX=/home/atr/local/ ..
make -j ?? && make install

Make sure LD_LIBRARY_PATH is set properly, it was picked up immediately.


***

diff --git a/cpp/src/arrow/io/file.cc b/cpp/src/arrow/io/file.cc
index 6cd1546f..db2d5b30 100644
--- a/cpp/src/arrow/io/file.cc
+++ b/cpp/src/arrow/io/file.cc
@@ -376,7 +376,8 @@ class MemoryMappedFile::MemoryMap : public MutableBuffer {
       is_mutable_ = true;
     } else {
       prot_flags_ = PROT_READ;
-      map_mode_ = MAP_PRIVATE;  // Changes are not to be committed back to the file
+      std::cout << "Are we here, in mmap reading mode, I am changing it MAP_SHARED | MAP_POPULATE \n";
+      map_mode_ = MAP_SHARED | MAP_POPULATE; //PRIVATE;  // Changes are not to be committed back to the file
       RETURN_NOT_OK(file_->OpenReadable(path));

       is_mutable_ = false;
atr@flex13:~/zrl/github/external/apache/arrow/cpp/release$


diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index 43215b63..284bc97d 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -28,6 +28,8 @@ string(REGEX MATCH

 project(arrow VERSION "${ARROW_BASE_VERSION}")

+set(CMAKE_CXX_COMPILER g++)
+
 set(ARROW_VERSION_MAJOR "${arrow_VERSION_MAJOR}")
 set(ARROW_VERSION_MINOR "${arrow_VERSION_MINOR}")
 set(ARROW_VERSION_PATCH "${arrow_VERSION_PATCH}")
@@ -360,7 +362,7 @@ set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS}")
 string(REPLACE "-std=c++11" "" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})

 # Add C++-only flags, like -std=c++11
-set(CMAKE_CXX_FLAGS "${CXX_ONLY_FLAGS} ${CMAKE_CXX_FLAGS}")
+set(CMAKE_CXX_FLAGS "${CXX_ONLY_FLAGS} ${CMAKE_CXX_FLAGS}  -O2 -Ofast -ffast-math -funroll-loops -march=native")

 # ASAN / TSAN / UBSAN
 if(ARROW_FUZZING)
@@ -386,6 +388,7 @@ if ("${ARROW_GENERATE_COVERAGE}")
   endif()
 endif()
